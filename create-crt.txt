https://connect2id.com/products/nimbus-oauth-openid-connect-sdk/examples/oauth/token-introspection
https://developers.onelogin.com/api-docs/1/oauth20-tokens/generate-tokens-2
https://www.tutorialspoint.com/spring_security/spring_security_with_oauth2.htm

https://dev.to/techschoolguru/how-to-create-sign-ssl-tls-certificates-2aai

pswd to all to privat key = test

// acting as CA's, gen its own privat key and self-signed cert.  pretend i'm the CA 
2027  openssl req -x509 -newkey rsa:4096 -days 365 -keyout ca-key.pem -out ca-cert.pem
 2031  openssl x509 --help
 2032  openssl x509 -in ca-cert.pem -text


//gen web server priv key
openssl req -newkey rsa:4096 -keyout server-key.pem -out server-req.pem -subj "/C=US/ST=TX/L=cibolo/O=PC Book/OU=Computer/CN=*.pcbook.com/emailAddress=pcbook@gmail.com"
 
 // now as the CA, u sign the server requ
 openssl x509 -req -in server-req.pem -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem
 
 //view server cet
 openssl x509 -in server-cert.pem -text
 
 //to automate cert gen, use conf file
 openssl x509 -req -in server-req.pem -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile server-ext.cnf

// combine server prvit key and cert into one .p12 file , so u can import it into browser
  openssl pkcs12 -export -out server-crtWithPrvKey.p12 -inkey server-key.pem -in server-cert.pem -certfile ca-cert.pem 

// server crt in .p12 format
 openssl pkcs12 -info -in server-crtWithPrvKey.p12 
 
//////////

These commands allow you to convert certificates and keys to different formats to make them compatible with specific types of servers or software.

    Convert a DER file (.crt .cer .der) to PEM

    openssl x509 -inform der -in certificate.cer -out certificate.pem

    Convert a PEM file to DER

    openssl x509 -outform der -in certificate.pem -out certificate.der

    Convert a PKCS#12 file (.pfx .p12) containing a private key and certificates to PEM

    openssl pkcs12 -in keyStore.pfx -out keyStore.pem -nodes

    You can add -nocerts to only output the private key or add -nokeys to only output the certificates.

    Convert a PEM certificate file and a private key to PKCS#12 (.pfx .p12)

    openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt

    Convert PEM to CRT (.CRT file)

    openssl x509 -outform der -in certificate.pem -out certificate.crt

OpenSSL Convert PEM

    Convert PEM to DER

    openssl x509 -outform der -in certificate.pem -out certificate.der

    Convert PEM to P7B

    openssl crl2pkcs7 -nocrl -certfile certificate.cer -out certificate.p7b -certfile CACert.cer

    Convert PEM to PFX

    openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt

OpenSSL Convert DER

    Convert DER to PEM

    openssl x509 -inform der -in certificate.cer -out certificate.pem

OpenSSL Convert P7B

    Convert P7B to PEM

    openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer

    Convert P7B to PFX

    openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer

    openssl pkcs12 -export -in certificate.cer -inkey privateKey.key -out certificate.pfx -certfile CACert.cer

OpenSSL Convert PFX

    Convert PFX to PEM

    openssl pkcs12 -in certificate.pfx -out certificate.cer -nodes

Generate rsa keys by OpenSSL

    Using OpenSSL on the command line you’d first need to generate a public and private key, you should password protect this file using the -passout argument, there are many different forms that this argument can take so consult the OpenSSL documentation about that.

    openssl genrsa -out private.pem 1024

    This creates a key file called private.pem that uses 1024 bits. This file actually have both the private and public keys, so you should extract the public one from this file:

    openssl rsa -in private.pem -out public.pem -outform PEM -pubout

    or

    openssl rsa -in private.pem -pubout > public.pem

    or

    openssl rsa -in private.pem -pubout -out public.pem

        You’ll now have public.pem containing just your public key, you can freely share this with 3rd parties. You can test it all by just encrypting something yourself using your public key and then decrypting using your private key, first we need a bit of data to encrypt:

    Example file :

    echo 'too many secrets' > file.txt

    You now have some data in file.txt, lets encrypt it using OpenSSL and the public key:

    openssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out file.ssl

    This creates an encrypted version of file.txt calling it file.ssl, if you look at this file it’s just binary junk, nothing very useful to anyone. Now you can unencrypt it using the private key:

    openssl rsautl -decrypt -inkey private.pem -in file.ssl -out decrypted.txt

    You will now have an unencrypted file in decrypted.txt:

    cat decrypted.txt
    |output -> too many secrets

